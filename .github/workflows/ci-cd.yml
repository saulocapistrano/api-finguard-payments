name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 Checkout do repositório
        uses: actions/checkout@v3

      - name: 🔧 Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: 📦 Build do projeto
        run: mvn clean package -DskipTests

  test:
    runs-on: ubuntu-latest
    needs: build

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: saulo
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: payments_db
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U saulo" --health-interval=10s --health-timeout=5s --health-retries=5

      kafka:
        image: confluentinc/cp-kafka
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: localhost:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
        ports:
          - 9092:9092
        options: --health-cmd="kafka-topics --list --bootstrap-server localhost:9092" --health-interval=10s --health-timeout=5s --health-retries=5

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=5s --health-timeout=3s --health-retries=5

    steps:
      - name: 🚀 Checkout do repositório
        uses: actions/checkout@v3

      - name: 🔧 Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: 🛠 Verificar se os serviços estão rodando
        run: docker ps -a

  sonar:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 🚀 Checkout do repositório
        uses: actions/checkout@v3

      - name: 🔧 Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: 📊 Analisar qualidade do código com SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar -Dsonar.projectKey=api-finguard-payments -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: sonar
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🚀 Checkout do repositório
        uses: actions/checkout@v3

      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔑 Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📦 Construir e publicar imagem Docker
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/api-finguard-payments:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/api-finguard-payments:latest
