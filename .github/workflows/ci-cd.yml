name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: saulo
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: payments_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U saulo -d payments_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        ports:
          - 2181:2181
        env:
          ZOOKEEPER_CLIENT_PORT: 2181

      kafka:
        image: confluentinc/cp-kafka:latest
        ports:
          - 9092:9092
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
          KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092"
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        options: >-
          --health-cmd "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 🚀 Checkout do repositório
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🔧 Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: 🔍 Verificar serviços antes dos testes
        run: |
          echo "Aguardando PostgreSQL..."
          until nc -z localhost 5432; do sleep 1; done
          echo "PostgreSQL disponível! ✅"

          echo "Aguardando Kafka..."
          until nc -z localhost 9092; do sleep 1; done
          echo "Kafka disponível! ✅"

          echo "Aguardando Redis..."
          until nc -z localhost 6379; do sleep 1; done
          echo "Redis disponível! ✅"

          echo "Criando tópicos no Kafka..."
          docker exec kafka kafka-topics --create --topic payments --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 || echo "Tópico já existe."

      - name: 🔬 Executar testes automatizados
        env:
          DATABASE_URL: jdbc:postgresql://localhost:5432/payments_db
          DATABASE_USERNAME: saulo
          DATABASE_PASSWORD: 123456
          KAFKA_BOOTSTRAP_SERVERS: kafka:9092
          REDIS_HOST: redis
          REDIS_PORT: 6379
        run: mvn test -X

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 🚀 Checkout do repositório
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🔧 Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: 📦 Build do projeto
        run: mvn clean package -DskipTests



  docker:
    runs-on: ubuntu-latest
    needs: sonar
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🚀 Checkout do repositório
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔑 Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📦 Construir e publicar imagem Docker
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/api-finguard-payments:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/api-finguard-payments:latest