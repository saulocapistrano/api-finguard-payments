package com.finguard.apifinguardpayments.domain;

import jakarta.persistence.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Map;

/**
 * Represents a payment transaction within the Finguard payment system.
 * This entity stores details about the payment, including its status, method, and involved parties.
 */
@Table(name = "payments")
@Entity
public class Payment {

    /**
     * Unique identifier for the payment record.
     * This ID is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Unique transaction ID for the payment.
     * This ID is used to track the payment across systems and must be unique.
     */
    @Column(unique = true)
    private String transactionId;

    /**
     * The amount of the payment.
     * This field uses BigDecimal to ensure precision in monetary calculations.
     */
    private BigDecimal amount;

    /**
     * The currency in which the payment is made.
     * This is represented as an enum to ensure only valid currencies are used.
     */
    @Enumerated(EnumType.STRING)
    private Currency currency;

    /**
     * The current status of the payment.
     * Possible values include PENDING, COMPLETED, FAILED, REFUNDED, and CANCELLED.
     */
    @Enumerated(EnumType.STRING)
    private PaymentStatus status;

    /**
     * The method used to make the payment.
     * Possible values include PIX, CREDIT_CARD, DEBIT_CARD, and BANK_TRANSFER.
     */
    @Enumerated(EnumType.STRING)
    private PaymentMethod paymentMethod;

    /**
     * The recurrence type of the payment.
     * Indicates whether the payment is a one-time transaction or recurring (e.g., MONTHLY, YEARLY).
     */
    @Enumerated(EnumType.STRING)
    private RecurrenceType recurrence;

    /**
     * Indicates whether the payment has been flagged as fraudulent.
     * This field is used by fraud detection systems to mark suspicious transactions.
     */
    private Boolean isFraudulent;

    /**
     * The reason why the payment was marked as fraudulent.
     * This field provides additional context when isFraudulent is set to true.
     */
    private String fraudReason;

    /**
     * The unique identifier of the payer (the entity making the payment).
     * This ID links the payment to the user or account initiating the transaction.
     */
    private String payerId;

    /**
     * The unique identifier of the payee (the entity receiving the payment).
     * This ID links the payment to the user or account receiving the funds.
     */
    private String payeeId;

    /**
     * A description of the payment.
     * This field can be used to provide additional details about the transaction.
     */
    private String description;

    /**
     * Additional metadata associated with the payment.
     * This field stores key-value pairs for flexible storage of extra information.
     */
    @ElementCollection
    private Map<String, String> metadata;

    /**
     * The amount that has been refunded for this payment.
     * This field tracks partial or full refunds associated with the transaction.
     */
    private BigDecimal refundedAmount;

    /**
     * The payment gateway used to process the transaction.
     * This field identifies the service (e.g., Stripe, PayPal) used to handle the payment.
     */
    private String paymentGateway;

    /**
     * The date and time when the payment was processed.
     * This field records the actual processing time of the transaction.
     */
    private LocalDateTime paymentDate;

    /**
     * The reason why the payment was cancelled.
     * This field provides context when the payment status is set to CANCELLED.
     */
    private String cancellationReason;

    /**
     * The number of times the payment has been retried.
     * This field is useful for tracking failed payment attempts and retries.
     */
    private Integer retryCount;

    /**
     * The date and time when the payment record was created.
     * This field is automatically populated when the record is first saved.
     */
    @CreationTimestamp
    private LocalDateTime createdAt;

    /**
     * The date and time when the payment record was last updated.
     * This field is automatically updated whenever the record is modified.
     */
    @UpdateTimestamp
    private LocalDateTime updatedAt;

    public Payment() {
    }

    public Payment(Long id, String transactionId, BigDecimal amount, Currency currency, PaymentStatus status, PaymentMethod paymentMethod, RecurrenceType recurrence, Boolean isFraudulent, String fraudReason, String payerId, String payeeId, String description, Map<String, String> metadata, BigDecimal refundedAmount, String paymentGateway, LocalDateTime paymentDate, String cancellationReason, Integer retryCount, LocalDateTime createdAt, LocalDateTime updatedAt) {
        this.id = id;
        this.transactionId = transactionId;
        this.amount = amount;
        this.currency = currency;
        this.status = status;
        this.paymentMethod = paymentMethod;
        this.recurrence = recurrence;
        this.isFraudulent = isFraudulent;
        this.fraudReason = fraudReason;
        this.payerId = payerId;
        this.payeeId = payeeId;
        this.description = description;
        this.metadata = metadata;
        this.refundedAmount = refundedAmount;
        this.paymentGateway = paymentGateway;
        this.paymentDate = paymentDate;
        this.cancellationReason = cancellationReason;
        this.retryCount = retryCount;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(String transactionId) {
        this.transactionId = transactionId;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    public Currency getCurrency() {
        return currency;
    }

    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    public PaymentStatus getStatus() {
        return status;
    }

    public void setStatus(PaymentStatus status) {
        this.status = status;
    }

    public PaymentMethod getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(PaymentMethod paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public RecurrenceType getRecurrence() {
        return recurrence;
    }

    public void setRecurrence(RecurrenceType recurrence) {
        this.recurrence = recurrence;
    }

    public Boolean getFraudulent() {
        return isFraudulent;
    }

    public void setFraudulent(Boolean fraudulent) {
        isFraudulent = fraudulent;
    }

    public String getFraudReason() {
        return fraudReason;
    }

    public void setFraudReason(String fraudReason) {
        this.fraudReason = fraudReason;
    }

    public String getPayerId() {
        return payerId;
    }

    public void setPayerId(String payerId) {
        this.payerId = payerId;
    }

    public String getPayeeId() {
        return payeeId;
    }

    public void setPayeeId(String payeeId) {
        this.payeeId = payeeId;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }

    public void setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
    }

    public BigDecimal getRefundedAmount() {
        return refundedAmount;
    }

    public void setRefundedAmount(BigDecimal refundedAmount) {
        this.refundedAmount = refundedAmount;
    }

    public String getPaymentGateway() {
        return paymentGateway;
    }

    public void setPaymentGateway(String paymentGateway) {
        this.paymentGateway = paymentGateway;
    }

    public LocalDateTime getPaymentDate() {
        return paymentDate;
    }

    public void setPaymentDate(LocalDateTime paymentDate) {
        this.paymentDate = paymentDate;
    }

    public String getCancellationReason() {
        return cancellationReason;
    }

    public void setCancellationReason(String cancellationReason) {
        this.cancellationReason = cancellationReason;
    }

    public Integer getRetryCount() {
        return retryCount;
    }

    public void setRetryCount(Integer retryCount) {
        this.retryCount = retryCount;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
}